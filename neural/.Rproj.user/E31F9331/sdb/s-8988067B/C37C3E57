{
    "collab_server" : "",
    "contents" : "##### Chapter 7: Neural Networks and Support Vector Machines -------------------\n\n##### Part 1: Neural Networks -------------------\n## Example: Modeling the Strength of Concrete  ----\n\n## Step 2: Exploring and preparing the data ----\n# read in data and examine structure\nconcrete <- read.csv(\"concrete.csv\")\nstr(concrete)\n\n# custom normalization function\nnormalize <- function(x) { \n  return((x - min(x)) / (max(x) - min(x)))\n}\n\n# apply normalization to entire data frame\nconcrete_norm <- as.data.frame(lapply(concrete, normalize))\n\n# confirm that the range is now between zero and one\nsummary(concrete_norm$strength)\n\n# compared to the original minimum and maximum\nsummary(concrete$strength)\n\n\n# create training and test data\nconcrete_train <- concrete_norm[1:773, ]\nconcrete_test <- concrete_norm[774:1030, ]\n\n## Step 3: Training a model on the data ----\n# train the neuralnet model\nlibrary(grid)\nlibrary(MASS)\nlibrary(neuralnet)\n\n# simple ANN with only a single hidden neuron\nset.seed(12345) # to guarantee repeatable results\nconcrete_model <- neuralnet(formula = strength ~ cement + slag +\n                              ash + water + superplastic + \n                              coarseagg + fineagg + age,\n                              data = concrete_train, hidden = 5)\n\n# visualize the network topology\nplot(concrete_model)\n\n## Step 4: Evaluating model performance ----\n# obtain model results\nmodel_results <- compute(concrete_model, concrete_test[1:8])\n# obtain predicted strength values\npredicted_strength <- model_results$net.result\n# examine the correlation between predicted and actual values\ncor(predicted_strength, concrete_test$strength)\n\n## Step 5: Improving model performance ----\n# a more complex neural network topology with 5 hidden neurons\nset.seed(12345) # to guarantee repeatable results\nconcrete_model2 <- neuralnet(strength ~ cement + slag +\n                               ash + water + superplastic + \n                               coarseagg + fineagg + age,\n                               data = concrete_train, hidden = number)\n\n# plot the network\nplot(concrete_model2)\n\n# evaluate the results as we did before\nmodel_results2 <- compute(concrete_model2, concrete_test[1:8])\npredicted_strength2 <- model_results2$net.result\ncor(predicted_strength2, concrete_test$strength)\n\n##### Part 2: Support Vector Machines -------------------\n## Example: Optical Character Recognition ----\n\n## Step 2: Exploring and preparing the data ----\n# read in data and examine structure\nletters <- read.csv(\"letterdata.csv\")\nstr(letters)\n\n# divide into training and test data\nletters_train <- letters[1:16000, ]\nletters_test  <- letters[16001:20000, ]\n\n## Step 3: Training a model on the data ----\n# begin by training a simple linear SVM\nlibrary(kernlab)\nletter_classifier <- ksvm(letter ~ ., data = letters_train,\n                          kernel = \"vanilladot\")\n\n# look at basic information about the model\nletter_classifier\n\n## Step 4: Evaluating model performance ----\n# predictions on testing dataset\nletter_predictions <- predict(letter_classifier, letters_test)\n\nhead(letter_predictions)\n\ntable(letter_predictions, letters_test$letter)\n\n# look only at agreement vs. non-agreement\n# construct a vector of TRUE/FALSE indicating correct/incorrect predictions\nagreement <- letter_predictions == letters_test$letter\ntable(agreement)\nprop.table(table(agreement))\n\n## Step 5: Improving model performance ----\nset.seed(12345)\nletter_classifier_rbf <- ksvm(letter ~ ., data = letters_train, kernel = \"rbfdot\")\nletter_predictions_rbf <- predict(letter_classifier_rbf, letters_test)\n\nagreement_rbf <- letter_predictions_rbf == letters_test$letter\ntable(agreement_rbf)\nprop.table(table(agreement_rbf))\n",
    "created" : 1463886829990.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1838425919",
    "id" : "C37C3E57",
    "lastKnownWriteTime" : 1463893278,
    "last_content_update" : 1463893278897,
    "path" : "/media/respati/Data/Data/PI/PI tyo/neural/MLwR_v2_07.r",
    "project_path" : "MLwR_v2_07.r",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}